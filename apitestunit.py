from fastapi import FastAPI
from pydantic import BaseModel
import os
from groq import Groq

# Cr√©er l'application FastAPI
app = FastAPI()

# ===========================
# üîß Configurer la cl√© API et client Groq
# ===========================
# D√©finir ta cl√© API (Assurez-vous que cette cl√© est bien prot√©g√©e)
api_key = "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"  # ‚ö†Ô∏è Remplacez avec votre propre cl√© API Groq

# D√©finir la cl√© API dans l'environnement
os.environ["GROQ_API_KEY"] = api_key

# Cr√©er une instance du client Groq
client = Groq(api_key=api_key)

# ===========================
# üíª D√©finir le format des requ√™tes
# ===========================
class CodeRequest(BaseModel):
    code: str  # Le code Python pour lequel g√©n√©rer des tests unitaires

# ===========================
# üöÄ Endpoint pour g√©n√©rer des tests unitaires
# ===========================
@app.post("/generate_tests")
def generate_tests(request: CodeRequest):
    # Cr√©er la requ√™te au mod√®le Groq pour g√©n√©rer des tests unitaires
    chat_completion = client.chat.completions.create(
        messages=[{
            "role": "user",
            "content": f"Voici un code Python :\n{request.code}\nG√©n√®re des tests unitaires pour ce code."
        }],
        model="llama-3.3-70b-versatile",  # Mod√®le utilis√© pour g√©n√©rer des tests unitaires
    )

    # R√©cup√©rer les tests unitaires g√©n√©r√©s
    generated_tests = chat_completion.choices[0].message.content.strip()

    return {"generated_tests": generated_tests}

# ===========================
# üöÄ Lancer le serveur si le script est ex√©cut√© directement
# ===========================
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)  # Lancer le serveur sur le port 8005
