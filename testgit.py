
import os
from groq import Groq

# üîë D√©finir ta cl√© API Groq (REMPLACE PAR TA CL√â)
api_key = "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"  # ‚ö†Ô∏è Remplace ceci avec ta cl√© API Groq

# Stocker la cl√© API dans l'environnement (optionnel)
os.environ["GROQ_API_KEY"] = api_key

# Initialiser le client Groq
client = Groq(api_key=api_key)

def generate_git_command(request):
    """
    G√©n√®re une commande Git en fonction d'une requ√™te utilisateur.

    Param√®tre:
    - request (str): Description de l'action Git souhait√©e.

    Retourne:
    - str: Commande Git g√©n√©r√©e par le mod√®le.
    """
    chat_completion = client.chat.completions.create(
        messages=[{"role": "user", "content": f"G√©n√®re une commande Git pour : {request}"}],
        model="llama-3.3-70b-versatile"
    )

    return chat_completion.choices[0].message.content

# ‚úÖ TESTS : G√©n√©rer des commandes Git
if __name__ == "__main__":
    tests = [
        "Cloner un d√©p√¥t GitHub",
        "Cr√©er un nouveau d√©p√¥t Git et faire un premier commit",
        "Mettre √† jour la branche principale avec la derni√®re version du d√©p√¥t distant",
        "Annuler le dernier commit tout en conservant les modifications",
        "Cr√©er une nouvelle branche et basculer dessus",
        "Ajouter et pousser un fichier nomm√© 'main.py' dans le d√©p√¥t distant"
    ]

    for test in tests:
        print(f"üõ†Ô∏è Requ√™te : {test}")
        print(f"üìå Commande Git : {generate_git_command(test)}\n")
