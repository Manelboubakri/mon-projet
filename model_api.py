# model_api.py

from fastapi import FastAPI
from pydantic import BaseModel
import os
from groq import Groq

# Cr√©er l'application FastAPI
app = FastAPI()

# ===========================
# üîß Configurer la cl√© API et client Groq
# ===========================
# D√©finir ta cl√© API (Assurez-vous que cette cl√© est bien prot√©g√©e)
api_key = "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"  # ‚ö†Ô∏è Attention √† la confidentialit√©

# D√©finir la cl√© API dans l'environnement
os.environ["GROQ_API_KEY"] = api_key

# Cr√©er une instance du client Groq
client = Groq(api_key=api_key)

# ===========================
# üíª D√©finir le format des requ√™tes
# ===========================
class CodeRequest(BaseModel):
    comment: str

# ===========================
# üöÄ Endpoint pour g√©n√©rer du code
# ===========================
@app.post("/generate_code")
def generate_code(request: CodeRequest):
    # Cr√©er la requ√™te au mod√®le Groq
    chat_completion = client.chat.completions.create(
        messages=[
            {"role": "user", "content": request.comment}
        ],
        model="llama-3.3-70b-versatile",  # Mod√®le de g√©n√©ration de code
    )

    # R√©cup√©rer le code g√©n√©r√©
    generated_code = chat_completion.choices[0].message.content.strip()

    return {"generated_code": generated_code}

# ===========================
# üöÄ Lancer le serveur si le script est ex√©cut√© directement
# ===========================
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8111)  # Lancer le serveur sur le port 8000
